---
title: "A Tool for Computing with Data"
<<<<<<< HEAD
format:
  revealjs:
    author: "STAT 20: Introduction to Probability and Statistics"
    self-contained: true
    height: 900
    width: 1600
    theme: ../../assets/slides.scss
    multiplex: false
    transition: fade
    slide-number: c
    incremental: false
    center: false
    menu: false
    highlight-style: github
    progress: false
    code-overflow: wrap
    title-slide-attributes:
      data-background-image: ../../assets/stat20-hex-bg.png
      data-background-size: contain
=======
format: 
  stat20-slides-revealjs: default
>>>>>>> 5efc5f49fa12e3c65e7216782635242f54f1d353
---

## Agenda

- PollEv competition
- Concept Questions: Intro to Computing with R
- R Workshop
  - Functions and Vectors
  - Data Frames
- Break
- Lab 1: Arbuthnot

# PollEv competition

```{r}
countdown::countdown(8, top = 0)
```

# Concept Questions

## Educated Guess 1

:::{.poll}
What will happen here?

\

Answer at `pollev.com/shobhana`
:::

\

```{r eval = FALSE, echo = TRUE, error = TRUE}
1 + "one"
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.notes}
- "one" is a string with no link at all to the number 1
- without that link, without two objects that are recognized for their numerical value, `+` doesn't work.
:::

## Educated Guess 2

:::{.poll}
What will happen here?

\

Answer at `pollev.com/shobhana`
:::

\

```{r}
#| eval: false
#| echo: true

a <- c(1, 2, 3, 4)
sqrt(log(a))
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.notes}
Talking points
- a is a vector of length four
- log and sqrt are functions that will return vectors of length four
- they're nested and will be evaluated from the inside out
:::


## Educated Guess 3

:::{.poll}
What will happen here?

\

Answer at `pollev.com/shobhana`
:::

\

```{r}
#| eval: false
#| echo: true

a <- 1 + 2
a + 1
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.notes}
- a is a not a string, it's the name of an object that's a number
- to overwrite a with `a + 1` requires re-assigning it to a: `a <- a + 1` (in some languages, `a + 1` would change the value of a)
- `a <- a + 1` is a good time to mention that while `a = a + 1` works in R and they might see it online, its convention to use <- for many reasons including that mathematically the statement with = is confusing.
:::

## Educated Guess 4

:::{.poll}
What will happen here?

\

Answer at `pollev.com/shobhana`
:::

\

```{r}
#| eval: false
#| echo: true
#| error: true

a <- c(1, 3.14, "seven")
class(a)
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.notes}
- the definition of a vector requires every element to be of the same type
- based on their reading, there are three classes that they're familiar with: numeric, factor, and character
- there's no way to translate "seven" into 7, so instead 1 and 3.14 must be translated into strings
- they will likely encounter this when looking at a data set in R (or other languages) and finding that vectors with what looked like numbers are stored as strings. This usually happens because there's a single errant character that the language doesn't know how to parse as a number.
:::

# Reading Questions

# Question 1

Which of the following best describes the distinction between R and RStudio?

- They're synonyms for the same thing.
- R is the language; RStudio is the tool we'll use to write and run R code.
- RStudio is the newer edition of the R language.
- R is a language of statistical computing; RStudio runs Excel.

# Question 2

How do you save the output of an R command into your Environment?

- Wrap the command in parentheses `()`.
- Wrap the command in curly braces `{}`.
- Use the assignment arrow and provide a name for the output.
- Drag and drop the command into your environment.


## Question 3

The atomic building block of the R language is the ...

- vector
- variable
- numeric
- factor
- data frame


## Question 4

What type of vector can be used to best represent ordinal and nominal categorical variables?

- the variable
- numeric
- continuous
- discrete
- factor

# R Workshop

## Components of RStudio

1. Console

2. Environment

3. Editor

4. File Directory

> Now we are going to switch over to RStudio to understand these 4 components a bit better.

## Components of RStudio

1. **Console**: Where the live R session lives. Type commands into the prompt `>` and press enter/return to run them. The Console is in the lower-left pane.

2. **Environment**: The space that keeps track of all of the data and objects that you have created or loaded and have access to. Found in the upper right pane.

3. **Editor**: Used to compose and edit text (.qmd files) and R code (.r files). Found in the upper left pane.

4. **File Directory**: Used to navigate between your files/folders on your Rstudio account. Can move, copy, rename, delete, etc. Found in the lower right pane.


## R as a calculator

R allows all of the standard arithmetic operations.

:::: {.columns}

::: {.column width="50%"}
**Addition**
```{r}
#| echo: true
1 + 2
```

**Subtraction**
```{r}
#| echo: true
1 - 2
```
:::

::: {.column width="50%"}
**Multiplication**
```{r}
#| echo: true
1 * 2 
```

**Division**
```{r}
#| echo: true
1 / 2
```
:::

::::


## R as a calculator, cont.

R allows all of the standard arithmetic operations.

:::: {.columns}

::: {.column width="50%"}
**Exponents**
```{r}
#| echo: true
2 ^ 3
```
:::

::: {.column width="50%"}
**Parentheses for Order of Ops.**
```{r}
#| echo: true
2 ^ 3 + 1
```

```{r}
#| echo: true
2 ^ (3 + 1)
```
:::

::::

## Your turn

:::{.poll}
What is three times one point two raised to the quantity thirteen divided six?
:::

```{r}
countdown::countdown(minutes = 2, top = 0)
```


## Object assignment {.scrollable}

You can create/save objects using the assignment operator `<-` . This is the equivalent of `=` in other programming languages. Note: be careful about spacing. `<-` is quite different from `< -`. One is an arrow, the other is a "greater than" followed by a "minus".

Shortcut to write `<-` in RStudio: if you are on a mac type `option` and `-` simultaneously. On a PC type `alt` and `-` at the same time.

```{r}
#| echo: true
#| eval: false
my_fav_num <- 11
```

. . .

In order to be recognized as a valid object name, you have to follow certain conventions; namely, the object name should begin with a letter.

```{r}
library(tidyverse)
library(knitr)
library(kableExtra)
tibble(`good names` = c("a", "b", "FOO", "my_var"), `names that cause errors` = c("1trial", "$", "^mean", "my var")) %>%
  kbl()
```

## Functions on vectors

A *vector* is the simplest structure used in R to store data. It can be created using the function `c()`.

```{r}
#| echo: true
my_vector <- c(1, 3, 4)
my_vector
```

. . .

A *function* operates on an R object and produces output. R has many of the mathematical functions that you would expect.

```{r}
#| echo: true
sum(my_vector)
```


## Your Turn

:::{.poll}
1. Create a vector named `vec` with the even integers between 1 and 10 as well as the number 99 (six elements total).

2. Find the sum of that vector.

3. Find the max of that vector.

4. Take the mean of that vector and round it to the nearest integer.
:::

These should all be solved with R code. If you don't know the name of a function to use, hazard a guess by looking for a help file (e.g. `?sum`) or google it.

```{r}
countdown::countdown(5, top = 0)
```


##

Demo of:

1. Creating an R script
2. Saving it
3. Typing in code that answers previous question
4. How to run code from a script
  - Put cursor on line and click "Run"
  - Put cursor on line and type command+return.
  - Copy and paste to the console.
  
:::{.notes}
vec <- c(2, 4, 6, 8, 10, 99)
sum(vec)
max(vec)
?round
round(mean(vec))
:::


## Building a data frame

You can combine vectors into a data frame using `data.frame()`[^1]

```{r echo = TRUE}
bill_depth_mm <- c(15.0, 17.1, 18.7, 18.9)
bill_length_mm <- c(47.5, 40.2, 39.0, 35.3)
species <- c("Gentoo", "Adelie", "Adelie", "Adelie")
```

\

. . .

```{r echo = TRUE}
penguins_df <- data.frame(bill_depth_mm, bill_length_mm, species)
penguins_df
```

[^1]: You can also use the `tibble()` function from the `tidyverse` package.


# Your Turn

:::{.poll}
1. Create an .r script, name it, and save it.

2. Create three vectors, `name`, `favorite_color`, and `favorite_number` that contain observations on those variables from 5 people in this class.

3. Combine them into a data frame called `my_classmates`.
:::

```{r}
countdown::countdown(6, top = 0)
```

## Loading Packages

R has a vast ecosystem of packages that add new functions. Any installed package can be loaded with the `library()` function.

. . .

:::: {.columns}

::: {.column width="50%"}
![](images/hexes.png)
:::

::: {.column width="50%" .fragment}
<!-- ![](images/tidyverse-hex.png){width="350px" fig-align=center} -->

Our two main packages:

- `tidyverse`
- `stat20data`

Load them with:

```{r}
#| echo: TRUE

library(tidyverse)
library(stat20data)
```

:::

::::

## Loading data from a package

Most data you will *not* be creating by hand. You will either be

1. Loading it in from a separate file.

2. Loading it from within an R package (most of our are in `stat20data`)

. . .

To load data from a package,

1. load that package with `library()`
2. You can then print the data to the console by typing its name and pressing enter or see it in the viewer with `View(<df name>)`.

. . .

```{r}
#| echo: TRUE
library(stat20data)
penguins
```



# Functions on data frames

## 3 functions from the `tidyverse`

The `tidyverse` package contains several functions used to manipulate data frames: 

. . .

- `select()` : subset columns 

. . .

- `arrange()` : sort rows 

. . .

- `mutate()` : create a new column from existing column(s)


## Selecting columns

. . .

```{r select, echo = TRUE, eval = FALSE}
select(penguins, species, island)
```

. . .

```{r ref.label = "select", echo = FALSE}
```


## Arranging the rows of a data frame

. . .

```{r arrange, echo = TRUE, eval = FALSE}
arrange(penguins, bill_length_mm)
```

. . .

```{r ref.label = "arrange", echo = FALSE}
```

. . .

> You can sort in descending order by wrapping the variable name in `desc()`.


## Mutating a new column

. . .

```{r mutate, echo = TRUE, eval = FALSE}
mutate(penguins, bill_index = bill_depth_mm + bill_length_mm)
```

. . .

```{r ref.label = "mutate", echo = FALSE}
```


. . .

> Remember that you can nest functions.


## Nesting functions

. . .

```{r mutate2, echo = TRUE, eval = FALSE}
select(mutate(penguins, bill_index = bill_depth_mm + bill_length_mm), bill_index)
```

. . .

```{r ref.label = "mutate2", echo = FALSE}
```


## Your turn

There is a built-in data set to R called `mtcars` that has information on cars that appeared in Motor Trend magazine. It's already loaded and can be accessed as `mtcars`.

:::{.poll}
1. Create a slimmer data frame that only contains the columns `hp` and `wt` and save it to `mtcars_slim`.

2. Create a new column called `power_to_weight` that is the ratio of `hp` to `wt`. Save the three-column data frame back over `mtcars_slim`.

3. Sort the data frame in descending order by the power-to-weight ratio.
:::

Hint: look up help files!

```{r}
countdown::countdown(8, top = 0)
```

## {background-color="#00403d"}

:::{.v-center-container style="text-align: center; font-size: 3em"}
{{< fa pause >}}\
Break
:::

```{r}
countdown::countdown(3, font_size = "2em")
```

# Lab 1: Arbuthnot