{
  "hash": "46d7415ab427c08b0da0d2eb9564d670",
  "result": {
    "markdown": "---\ntitle: \"Conditioning\"\nformat:\n  revealjs:\n    author: \"STAT 20: Introduction to Probability and Statistics\"\n    height: 900\n    width: 1600\n    theme: ../../assets/slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: false\n    center: false\n    menu: false\n    highlight-style: github\n    progress: false\n    code-overflow: wrap\n    title-slide-attributes:\n      data-background-image: ../../assets/stat20-hex-bg.png\n      data-background-size: contain\nexecute: \n  echo: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Agenda\n\n- Concept Questions\n- Data Pipelines\n- *Break*\n- Practice Problems\n\n# Concept Questions\n\n## Question 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"fruit\", \"fruit\", \"vegetable\") == \"fruit\"\n```\n:::\n\n\n:::{.poll}\nWhat will this line of code return?\n\nRespond at `pollev.com`.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_3b32ebb8\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n## Evaluating equivalence, cont.\n\nIn R, this evaluation happens element-wise when operating on vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"fruit\", \"fruit\", \"vegetable\") == \"fruit\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"fruit\", \"fruit\", \"vegetable\") != \"fruit\"\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"fruit\", \"vegetable\", \"boba\") %in% c(\"fruit\", \"vegetable\")\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n## Question 2\n\nWhich observations will be included in the following data frame?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE)\n```\n:::\n\n\n:::{.poll}\nPlease respond at `pollev.com`.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_c81554ad\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Question 3: Opinion\n\n10. What are students’ perceptions of the chance that there is a new COVID variant that disrupts instruction in Fall 2022?\n\n:::{.poll}\nDo you think students in their first semester would be *more* likely or *less* likely to think we would remain in remote learning for the entire semester?\n\nAnswer at `pollev.com`.\n:::\n\n:::notes\nQ: what is the comparison group: all students or students who are not in their first semester?\n:::\n\n## Question 4\n\n:::{.poll}\nWhich data frame will have fewer rows?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_survey <- mutate(class_survey, \n                       first_sem = Time_at_Cal == \"This is my first semester!\")\ndf_1 <- filter(class_survey, first_sem)\n```\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_2 <- filter(class_survey, Time_at_Cal == \"This is my first semester!\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_a07a6577\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n# Building data pipelines\n\n\n## Question 2 Redux {auto-animate=true}\n\nHow do we extract the average of these students' chance that class will be disrupted by a new COVID variant?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE)\n```\n:::\n\n\n## Question 2 Redux {auto-animate=true}\n\nHow do we extract the average of these students' chance that class will be disrupted by a new COVID variant?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(filter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE),\n       Coding_Exp_Scale,\n       Olympics,\n       Entrepreneur,\n       COVID_Fall)\n```\n:::\n\n\n## Question 2 Redux {auto-animate=true}\n\nHow do we extract the average of these students' chance that class will be disrupted by a new COVID variant?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(select(filter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE),\n       Coding_Exp_Scale,\n       Olympics,\n       Entrepreneur,\n       COVID_Fall),\n       covid_avg = mean(COVID_Fall))\n```\n:::\n\n\n## Question 2 Redux {auto-animate=true}\n\nHow do we extract the average of these students' chance that class will be disrupted by a new COVID variant?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(select(filter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE),\n       Coding_Exp_Scale,\n       Olympics,\n       Entrepreneur,\n       COVID_Fall),\n       covid_avg = mean(COVID_Fall))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  covid_avg\n      <dbl>\n1     0.420\n```\n:::\n:::\n\n\n\n## Data Pipelines\n\n. . .\n\nMost claims about data start with a *raw* data set, undergo many subsetting, aggregating, and cleaning operations, then return a *data product*.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/pipeline-1.png){width=75%}\n:::\n:::\n\n\n. . .\n\n> Let's look at three equivalent ways to build a pipeline\n\n\n## Nesting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(select(filter(class_survey, \n       Coding_Exp_Scale < 3,\n       Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n       Entrepreneur == TRUE),\n       Coding_Exp_Scale,\n       Olympics,\n       Entrepreneur,\n       COVID_Fall),\n       covid_avg = mean(COVID_Fall))\n```\n:::\n\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Cons**\n\n- Must be read from inside out 👎 \n- Hard to keep track of arguments 👎 \n:::\n\n::: {.column width=\"50%\"}\n**Pros**\n\n- All in one line of code 👍\n- Only refer to one data frame 👍\n:::\n\n::::\n\n\n## Step-by-step\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- filter(class_survey, \n              Coding_Exp_Scale < 3,\n              Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n              Entrepreneur == TRUE)\ndf2 <- select(df1, \n              Coding_Exp_Scale,\n              Olympics,\n              Entrepreneur,\n              COVID_Fall)\nsummarize(df2,\n          covid_avg = mean(COVID_Fall))\n```\n:::\n\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Cons**\n\n- Have to repeat data frame names 👎 \n- Creates unnecessary objects 👎 \n:::\n\n::: {.column width=\"50%\"}\n**Pros**\n\n- Stores intermediate objects 👍\n- Can be read top to bottom 👍\n:::\n\n::::\n\n\n##\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/pipeline-2.png){width=100%}\n:::\n:::\n\n\n\n## Using the pipe operator\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_survey %>%\n  filter(Coding_Exp_Scale < 3,\n         Olympics %in% c(\"Ice skating\", \"Speed skating\"),\n         Entrepreneur == TRUE) %>%\n  select(Coding_Exp_Scale,\n         Olympics,\n         Entrepreneur,\n         COVID_Fall) %>%\n  summarize(covid_avg = mean(COVID_Fall))\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Cons**\n\n- 🤷 \n:::\n\n::: {.column width=\"50%\"}\n**Pros**\n\n- Can be read like an english paragraph 👍\n- Only type the data once 👍\n- No leftovers objects 👍\n:::\n\n::::\n\n\n## Understanding your pipeline\n\n. . .\n\nIt's good practice to understand the output of each line of code by *breaking the pipe*.\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_survey %>%\n  select(COVID_Fall) %>%\n  filter(time_at_cal == \"It's my first year.\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `filter()`:\n! Problem while computing `..1 = time_at_cal == \"It's my first year.\"`.\nCaused by error in `mask$eval_all_filter()`:\n! object 'time_at_cal' not found\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_survey %>%\n  select(COVID_Fall)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 707 × 1\n   COVID_Fall\n        <dbl>\n 1       0.17\n 2       0.5 \n 3       0.5 \n 4       0.3 \n 5       0.35\n 6       0.3 \n 7       0.3 \n 8       0.35\n 9       0.05\n10       0.5 \n# … with 697 more rows\n```\n:::\n:::\n\n:::\n\n::::\n\n\n## Question 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_survey %>% # A #<<\n  filter(Coding_Exp_Scale < 3,\n         Olympics %in% c(\"Ice skating\", \n                         \"Speed skating\"),\n         Entrepreneur == TRUE) %>% # B #<<\n  select(Coding_Exp_Scale,\n         Olympics,\n         Entrepreneur,\n         COVID_Fall) %>% # C #<<\n  summarize(covid_avg = mean(COVID_Fall)) # D #<<\n```\n:::\n\n\n:::{.poll}\nWhat are the dimensions (rows x columns) of the data frames output at each stage of this pipe?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_07ceecb1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\n\n\n<!-- ## Question 2: Code -->\n\n<!-- Do you think first year students would be more likely or less likely to think we would remain in remote learning for the entire semester? -->\n\n<!-- :::{.poll} -->\n<!-- Which commands are needed to help answer this question? -->\n<!-- ::: -->\n\n<!-- :::{layout-ncol=2} -->\n<!-- ```{r} -->\n<!-- #| eval: false -->\n\n<!-- class_survey %>% -->\n<!--     filter(Time_at_Cal) %>% -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ## Describing `COVID_Fall` -->\n\n<!-- ```{r} -->\n<!-- library(tidyverse) -->\n<!-- library(stat20data) -->\n<!-- data(\"class_survey\") -->\n<!-- class_survey <- class_survey %>% -->\n<!--   select(Time_at_Cal, COVID_Fall) %>% -->\n<!--   mutate(COVID_Fall = round(COVID_Fall, digits = 2)) -->\n<!-- ``` -->\n\n\n<!-- ```{r echo = TRUE, eval = FALSE} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() -->\n<!-- ``` -->\n\n<!-- ```{r echo = FALSE, eval = TRUE, fig.height = 3} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() -->\n<!-- ``` -->\n\n\n<!-- Aside: *density plot* -->\n<!-- ```{r echo = TRUE, eval = FALSE} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_density() #<< -->\n<!-- ``` -->\n\n\n<!-- ```{r echo = FALSE, eval = TRUE, fig.height = 3} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_density() -->\n<!-- ``` -->\n\n<!-- ## Describing `COVID_Fall` -->\n\n\n<!-- ```{r echo = TRUE, eval = FALSE} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() -->\n<!-- ``` -->\n\n\n<!-- ```{r echo = FALSE, eval = TRUE, fig.height = 3} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() -->\n<!-- ``` -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- summarize(class_survey, -->\n<!--           mean = mean(COVID_Fall), -->\n<!--           med = median(COVID_Fall), -->\n<!--           iqr = IQR(COVID_Fall), -->\n<!--           sd = sd(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- The distribution of probabilities of **all** students is right-skewed with a mean probability of 14.77 and a median probability of 0.35, an IQR of 0.4 and a SD of 379.83. -->\n\n<!-- ## Describing first year students -->\n\n<!-- How can we focus our analysis on just first year students? -->\n\n<!-- . . . -->\n\n<!-- **General goal**: Identify whether the *value* in a variable meets a *condition*. -->\n\n<!--  > Here: Is the value in `COVID_Fall` equal to `\"I'm in my first year.\"`? -->\n\n<!-- . . . -->\n\n<!-- **Our Tool, Comparison operators**: A collection of operators that compare two values / vectors and return `TRUE` or `FALSE`. -->\n\n<!-- ## Evaluating equivalence -->\n\n<!-- ```{r fruit1, echo = TRUE, eval = FALSE} -->\n<!-- \"fruit\" == \"vegetable\" -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"fruit1\", echo = FALSE} -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r fruit2, echo = TRUE, eval = FALSE} -->\n<!-- \"fruit\" == \"fruit\" -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"fruit2\", echo = FALSE} -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r fruit3, echo = TRUE, eval = FALSE} -->\n<!-- \"fruit\" != \"fruit\" -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"fruit3\", echo = FALSE} -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- > `==` evaluates equality, `!=` evaluates inequality. -->\n\n\n<!-- ## Adding a grouping variable -->\n\n<!-- . . . -->\n\n<!-- ```{r mut, echo = TRUE, eval = FALSE} -->\n<!-- class_survey <- mutate(class_survey, -->\n<!--                        first_year = Time_at_Cal == \"I'm in my first year.\") -->\n<!-- class_survey -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"mut\", echo = FALSE, eval = TRUE} -->\n<!-- ``` -->\n\n<!-- # Filtering data using logical vectors -->\n\n<!-- ## Filtering rows -->\n\n\n<!-- ```{r fil, echo = TRUE, eval = FALSE} -->\n<!-- first_yr_df <- filter(class_survey, first_year) -->\n<!-- first_yr_df -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"fil\", echo = FALSE, eval = TRUE} -->\n<!-- ``` -->\n\n\n<!-- ## Describing `COVID_Fall` with statistics -->\n\n<!-- Statistics from *all* students -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- summarize(class_survey, -->\n<!--           mean = mean(COVID_Fall), -->\n<!--           med = median(COVID_Fall), -->\n<!--           iqr = IQR(COVID_Fall), -->\n<!--           sd = sd(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- Statistics from *first year* students -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- summarize(first_yr_df, -->\n<!--           mean = mean(COVID_Fall), -->\n<!--           med = median(COVID_Fall), -->\n<!--           iqr = IQR(COVID_Fall), -->\n<!--           sd = sd(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- ## Describing `COVID_Fall` with graphics -->\n\n\n<!-- Histogram for *all* students -->\n\n<!-- ```{r echo = TRUE, fig.height=4} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() -->\n<!-- ``` -->\n\n<!-- Histograms from *first year* and non-first year students -->\n\n<!-- ```{r echo = TRUE, fig.height=4} -->\n<!-- ggplot(class_survey, aes(x = COVID_Fall)) + -->\n<!--   geom_histogram() + -->\n<!--   facet_wrap(vars(first_year)) -->\n<!-- ``` -->\n\n\n\n<!-- ## Example 1 -->\n\n<!-- > What is the mean probability of `COVID_Fall` for students who were very confident that we could engineer our way out of the effects of climate change (6 or above on `Climate`)? -->\n\n<!-- ```{r} -->\n<!-- data(\"class_survey\") -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r opt, echo = TRUE, eval = FALSE} -->\n<!-- optimist_df <- filter(class_survey, Climate >= 6) -->\n<!-- summarize(optimist_df, mean(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"opt\", echo = FALSE, eval = TRUE} -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r opt2, echo = TRUE, eval = FALSE} -->\n<!-- summarize(class_survey, mean(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"opt2\", echo = FALSE, eval = TRUE} -->\n<!-- ``` -->\n\n\n<!-- ## Example 2 -->\n\n<!-- > What is the mean probability of `COVID_Fall` for **first-year** students who were very confident that we could engineer our way out of the effects of climate change (6 or above on `Climate`)? -->\n\n<!-- ```{r} -->\n<!-- data(\"class_survey\") -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r opt3, echo = TRUE, eval = FALSE} -->\n<!-- optimist_df <- filter(class_survey, -->\n<!--                       Climate >= 6, -->\n<!--                       Time_at_Cal == \"I'm in my first year.\") -->\n<!-- summarize(optimist_df, mean(COVID_Fall)) -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r ref.label = \"opt3\", echo = FALSE, eval = TRUE} -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- > You can string together conditions by adding them as arguments to `filter()` separated by commas.  -->\n<!-- --   -->\n<!-- > What else can logical vectors be used for? -->\n\n<!-- ## -->\n\n<!-- ```{r echo = TRUE, eval = FALSE} -->\n<!-- summarize(class_survey, mean(Time_at_Cal == \"I'm in my first year.\")) -->\n<!-- ``` -->\n\n<!-- :::{.poll} -->\n<!-- What is will this line of code return? -->\n\n<!-- Respond at `pollev.com`. -->\n<!-- ::: -->\n\n\n<!-- ## -->\n\n<!-- <center> -->\n<!-- <iframe src=\"https://embed.polleverywhere.com/multiple_choice_polls/diI2wNFcHri5Ga0Wd7gdN?controls=none&short_poll=true\" width=\"800px\" height=\"600px\"></iframe></center> -->\n\n\n<!-- ## Boolean Algebra -->\n\n<!-- Logical vectors have a dual representation as `TRUE` `FALSE` and `1`, `0`, so you can do math on logicals accordingly. -->\n\n<!-- ```{r echo = TRUE} -->\n<!-- TRUE + TRUE -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- ```{r} -->\n<!-- TRUE * TRUE -->\n<!-- ``` -->\n\n<!-- . . . -->\n\n<!-- > Taking the mean of a logical vector is equivalent to find the proportion of rows that are `TRUE` (i.e. the proportion of rows that meet the condition). -->\n\n# Break\n\n# Practice Problems\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"slides_files/libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"slides_files/libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}