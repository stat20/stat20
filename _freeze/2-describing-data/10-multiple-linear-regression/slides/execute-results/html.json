{
  "hash": "f25f8b66bc056fe7075866a0eb9948f6",
  "result": {
    "markdown": "---\ntitle: \"Multiple Linear Regression\"\nformat:\n  revealjs:\n    author: \"STAT 20: Introduction to Probability and Statistics\"\n    height: 900\n    width: 1600\n    theme: ../../assets/slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: c\n    incremental: false\n    center: false\n    menu: false\n    highlight-style: github\n    progress: false\n    code-overflow: wrap\n    title-slide-attributes:\n      data-background-image: ../../assets/stat20-hex-bg.png\n      data-background-size: contain\n---\n\n\n# Concept Questions\n\n## Estimate the coefficient\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_dafda202\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\\\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(bill_depth_mm ~ bill_length_mm, data = penguins)\n```\n:::\n\n\n\\\n\\\n\\\n\n:::{.poll}\nWhat will be the sign of the coefficient for  `bill_length_mm`?\n:::\n\n:::notes\nThis one warms students up to the idea of working between the formula, the equation of the line, and a plot. It will also likely surprise them: without controlling for the species, there's actually a slight negative relationship here.\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm, data = penguins)\n\nCoefficients:\n   (Intercept)  bill_length_mm  \n      20.78665        -0.08233  \n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Estimate the coefficient, take two\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_1b3d84e1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 <- lm(bill_depth_mm ~ bill_length_mm + species, penguins)\n```\n:::\n\n\n\\\n\\\n\\\n\n:::{.poll}\nWhat will be the sign of the coefficient for  `bill_length_mm`? How many coefficients will be in this linear model?\n:::\n\n:::notes\nAfter the first question, some should get the second one correct, but the fact that it can change may surprise some students. They haven't need an example of a categorical variable with more than k = 2 levels, so it will be challenging for them to think through how many coefficients are required (since there are k = 3 levels, there are k = 3-1 dummy variables required, for a total of 4 coefficients.)\n\nYou may want to follow this question up by drawing on a board a data frame with `bill_length_mm` and `species` and show how you need to mutate two new dummy variables. You can also mention that by default, R leaves as the references level the one which comes first alphabetically.\n:::\n\n## \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](slides_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm + species, data = penguins)\n\nCoefficients:\n     (Intercept)    bill_length_mm  speciesChinstrap     speciesGentoo  \n         10.5653            0.2004           -1.9331           -5.1033  \n```\n:::\n:::\n\n\n. . .\n\n**Dummy Variable**\n\nA variable that is 1 if an observation takes a particular level of a categorical variable and 0 otherwise. A categorical variable with $k$ levels can be encoded using $k - 1$ dummy variables.\n\n\n## Interpreting coefficients\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_6a3119f9\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;right:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = bill_depth_mm ~ bill_length_mm + species, data = penguins)\n\nCoefficients:\n     (Intercept)    bill_length_mm  speciesChinstrap     speciesGentoo  \n         10.5653            0.2004           -1.9331           -5.1033  \n```\n:::\n:::\n\n\n:::poll\nWhich is the correct interpretation of the coefficient in front of Gentoo?\n:::\n\n:::notes\nThis one assess their ability to use a conditional interpretation of a regression coefficient (controlling for the other variables in the model...)\n:::\n\n\n<!-- ## MLR Geometry -->\n\n<!-- . . . -->\n\n<!-- ```{r} -->\n<!-- countdown::countdown(1, top = 0) -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- zagat <- read_csv(\"https://www.dropbox.com/s/c797oanmvdzjegt/zagat.csv?dl=1\") -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- m3 <- lm(price ~ food + decor + geo, data = zagat) -->\n<!-- ``` -->\n\n<!-- :::poll -->\n<!-- What is the geometry described by this model? -->\n<!-- ::: -->\n\n<!-- ::: -->\n<!-- The answer is two parallel planes. -->\n\n<!-- This is to test their ability to extrapolate from the examples they've seen in the notes. It's also to have fun spinning a 3D scatter plot. -->\n\n<!-- Students might ask about higher dim, where these models describe \"hyperplanes\". -->\n<!-- ::: -->\n\n\n<!-- ## -->\n\n<!-- ```{r} -->\n<!-- #| code-fold: false -->\n<!-- #| echo: false -->\n<!-- #| eval: false -->\n<!-- library(plotly) -->\n<!-- library(reshape2) -->\n\n<!-- grid_points <- 30 -->\n<!-- axis_x <- seq(min(zagat$food),  -->\n<!--               max(zagat$food), -->\n<!--               length.out = grid_points) -->\n<!-- axis_y <- seq(min(zagat$decor),  -->\n<!--               max(zagat$decor), -->\n<!--               length.out = grid_points) -->\n<!-- zagat_plane <- expand.grid(food = axis_x,  -->\n<!--                          decor = axis_y,  -->\n<!--                          KEEP.OUT.ATTRS = F) -->\n<!-- zagat_plane$price <- predict.lm(m3, newdata = zagat_plane) -->\n<!-- z <- acast(zagat_plane, food ~ decor + geo, value.var = \"price\") -->\n<!-- p <- plot_ly(zagat, x = ~food, y = ~decor, z = ~price, showlegend=FALSE) %>% -->\n<!--   add_markers(marker = list(size = 5, -->\n<!--                             opacity = .6, -->\n<!--                             color = \"steelblue\"), -->\n<!--               name = ~restaurant) %>% -->\n<!--   config(displayModeBar = FALSE)  -->\n<!-- p %>% -->\n<!--   add_surface(x = axis_x, -->\n<!--               y = axis_y, -->\n<!--               z = z, showscale=FALSE, -->\n<!--               colorscale = list(c(0, 1), c(\"tan\", \"tan\")), -->\n<!--               name = \"Linear Model\") -->\n<!-- ``` -->\n\n",
    "supporting": [
      "slides_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}