{
  "hash": "949844e142d8893492f2fc1881ca0bfa",
  "result": {
    "markdown": "---\ntitle: \"Communicating with Graphics\"\nsubtitle: \"Six ways to hone the message of a data visualization.\"\ndate: \"09/14/2022\"\nimage: images/penguin-plot.png\nformat: pdf\nexecute: \n  warning: false\n  message: false\n  fig-align: center\nfrom: markdown+emoji\n---\n\n\n[[Discuss](https://app.perusall.com)]{.btn .btn-primary} [[Reading Questions](https://www.gradescope.com/courses/416233)]{.btn .btn-primary} [[PDF](notes.pdf)]{.btn .btn-primary}\n\n\\\n\n[A]{.dropcap}t this point in the course, you have a bevy of different types of statistical graphics under your belt: scatterplots, histograms, dot plots, violin plots, box plots, density curves, and bar plots of several kinds. You also have a broad framework to explain how these graphics are composed: the Grammar of Graphics. But to what purpose? Why plot data? For whom?\n\nEvery time you build a plot, you do so with one of two audiences in mind.\n\n1. Yourself.\n2. Someone else.\n\nThe process of building understanding from a data set is one that should be driven by curiousity, skepticism, and thoughtfulness. As a data scientist, you'll find yourself in conversation with your data: asking questions of it, probing it for structure, and seeing how it responds. This thoughtful conversation is called *exploratory data analysis* (or EDA).\n\n[goal of EDA]\n\nAt some point, you'll find yourself confident in the claim that can be supported by your graphic and the focus changes to communicating that claim as effectively as possible. Here, your audience shifts from yourself to someone else: other scientists, customers, co-workers in a different part of your company, or casual readers. You must consider the context in which they'll be viewing your graphic: what they know, what they expect, what they want.\n\nIn these notes we discuss six ways to hone the message of your data visualization. They are:\n\n1. Mapping versus setting\n2. Labels for clarity\n3. The importance of scale\n4. Overplotting\n5. Choosing a theme\n6. Annotations\n\n[This is iterative]\n\nWe will use two running examples throughout these notes: a line plot of the number of christenings in 17th century London[^arbuthnot] and a scatter plot showing the bill sizes of penguins near Palmer Station, Antarctica[^palmer].\n\n[^arbuthnot]: For data documentation, see the `stat20data` R package.\n[^palmer]: For data documentation, see the `palmerpenguins` R package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(stat20data)\nlibrary(patchwork)\ndata(penguins)\ndata(arbuthnot)\n\narbuthnot <- mutate(arbuthnot, total = boys + girls)\n\np1 <- ggplot(arbuthnot, aes(x = year,\n                            y = total)) +\n    geom_line()\n\np2 <- ggplot(penguins, aes(x = bill_length_mm,\n                           y = bill_depth_mm)) +\n    geom_point()\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n## 1. Mapping vs Setting\n\nOnce you have your first draft of a plot complete and you're thinking about how to fine tune it for your audience, \n\nConsider the first draft of the penguins plot above. It might feel a bit drab to have a large mass of points to have them in black, the same color as the labels and surrounding text. Let's make the points blue instead to make them stand out a bit more.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm,\n                     color = \"blue\")) +\n    geom_point()\n```\n:::\n\n\n\n<details><summary>Click here when you're ready to see the result.</summary>\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-align='center'}\n:::\n:::\n\n\n</details>\n\nThis is . . . unexpected. Why did it color the points red? Is this a bug?\n\nWhat we've stumbled into is a subtle but essential distinction in the grammar of graphics: *mapping* vs *setting*. When you put an aesthetic attribute (`x`, `color`, `size`, etc.) into the `aes()` function, you're mapping that attribute in the plot to whatever data lives in the corresponding column in the data frame. Mapping was this process:\n\n![](images/mapping.png){fig-align=center width=\"450px\"}\n\nThat's not what we set out to do here. We just wanted to tweak the look of our aesthetic attributes in a way that doesn't have anything to do with the data in our data frame. This process is called *setting* the attribute.\n\nTo set the color to blue[^colors], we need to make just a small change to the syntax. Let's move the `color = \"blue\"` argument outside of the `aes()` function and into the `geom_()` function.\n\n[^colors]: To see the vast (and somewhat strange) palette of color names that R knows, type `colors()` at the console.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm)) +\n    geom_point(color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nAh, that looks much better!\n\nColor isn't the only aesthetic attribute that you can set. Let's increase slightly the size of our points by setting the size to three times the size of the default.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm)) +\n    geom_point(color = \"blue\", size = 3)\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nIt's not clear that that improves the readability of the plot - there is more overlap between the points now - but the setting worked. How would it have looked if instead we had mapped the size? When you map, you need a map to a column in your data frame, so let's map size to species.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm,\n                     size = species)) +\n    geom_point(color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nWe've made a mess of our plot now, but it is clear what happened. R looked inside the `species` column, found a categorical variable with three levels and selected a distinct size for each of those levels.\n\nThis is another area in which the grammar of graphic guides clear thinking when constructing a graphic. The aesthetic attributes of a plot can be determined either by variability found in a data set or by fixed values that we set. The former is present in all data visualization but it's the latter that comes into play when fine-tuning your plot for an audience.\n\n## 2. Adding Labels for Clarity\n\nYou may have noticed that `ggplot2` pulls the labels for the x-axis, the y-axis, and the legend directly from the names of the variables in the data frame. This results in labels like `bill_length_mm`, which is no problem when you're making plots for yourself - you know what this variable means. But will an outside audience?\n\nYou can change the labels of your plot by adding a `labs()` layer.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm)) +\n    geom_point(color = \"blue\") +\n    labs(x = \"Bill Length (mm)\",\n         y = \"Bill Depth (mm)\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nAxis and legend labels should be concise and often include the units of measurement. If you find them getting too wordy, know that you can clarify or expand on what is being plotted either in a figure caption or in the accompanying text.\n\nSpeaking of captions, those a can be added too, as well as a title.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm)) +\n    geom_point(color = \"blue\") +\n    labs(x = \"Bill Length (mm)\",\n         y = \"Bill Depth (mm)\",\n         title = \"Penguins show little association between bill length\\n and bill depth\",\n         caption = \"Source: Data collected by Dr. Kristen Gorman at Palmer Station, Antarctica\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nThe title of a plot is valuable real estate for communicating the primary story of your plot. It should highlight the most important structure in the data. In the plot above, there appears to be little correspondence between bill length and bill depth. Of course, that changes when we map species to color. Let's make that plot and title it accordingly.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_length_mm,\n                     y = bill_depth_mm,\n                     color = species)) +\n    geom_point() +\n    labs(x = \"Bill Length (mm)\",\n         y = \"Bill Depth (mm)\",\n         title = \"Bill length and bill depth positively correlated and\\n strongly dependent on species\",\n         caption = \"Source: Data collected by Dr. Kristen Gorman at Palmer Station, Antarctica\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nThe practice of using the plot title to convey the main message of the plot is used to powerful effect by the visualization experts at the British publication, *The Financial Times*[^ft]. They have developed a wealth of visualizations to help readers understand what is happening with public health throughout the pandemic. The sobering graphic below uses the title to guide the viewer to the most important visual structure in the plot: the yawning vertical gap bewteen dosage rates between high and low income countries.\n\n![](images/ft.png){fig-align=center width=\"500px\"}\n\n[^ft]: Visualization drawn from the excellent collection of graphics at the Financial Times Covid Tracker <https://ig.ft.com/coronavirus-vaccine-tracker/>.\n\n\n## 3. The Importance of Scale\n\nWhen a person views your plot, their first impression will be determined by a coarse interpretation of the boldest visual statement. When using a line plot, that is usually the general trend seen when reading left to right.\n\nWhat is the first word that comes to mind to describe the trend in each of the four plots below?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narbuthnot <- mutate(arbuthnot, p_girls = girls / total)\n\np1 <- ggplot(arbuthnot, aes(x = year,\n                            y = p_girls)) +\n    geom_line() +\n    xlim(1629, 1635) +\n    labs(x = \"\", y = \"\")\n\np2 <- ggplot(arbuthnot, aes(x = year,\n                            y = p_girls)) +\n    geom_line() +\n    xlim(1703, 1707) +\n    labs(x = \"\", y = \"\")\n\np3 <- ggplot(arbuthnot, aes(x = year,\n                            y = p_girls)) +\n    geom_line() +\n    labs(x = \"\", y = \"\")\n\np4 <- ggplot(arbuthnot, aes(x = year,\n                            y = p_girls)) +\n    geom_line() +\n    ylim(0, 1) +\n    labs(x = \"\", y = \"\")\n\n(p1 + p2) / (p3 + p4)\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nClockwise from the upper left, you likely said something like \"increasing\", \"decreasing\", \"variable\", and \"stable\". Now take a second look. What exactly is being plotted here?\n\nThe labels along the axes are a hint to what you're looking at here. These are, in fact, four plots from the exact same data: Arbuthnot christening records, with the proportion of girls christened on the x-axis. What differs is the limits of the x- and y-axes.\n\nMost software will automatically set the limits of your plot based on the range of the data. In the Arbuthnot data, the years range from 1629 to 1710 and the proportion of girls christened ranges from .463 to .497. The leads to the default graphic found in the lower left panel. Each of the other three plots have modified the limits of the x- or y-axis to capture different parts the data scaled in different ways. In ``ggplot2` this is done by adding an `xlim()` or `ylim()` layer.\n\nThis is the power of scaling. From one data set, you can convey four different (and incompatible!) messages by changing the scale. So which one is correct? It depends on the context and the question that drove the collection of the data. John Arbuthnot sought to understand the whether the chance of being born a girl is 1/2. That question is answered most clearly by the following plot (with the title driving home that main message).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(arbuthnot, aes(x = year,\n                      y = p_girls)) +\n    geom_line() +\n    ylim(0, 1) +\n    labs(title = \"Proportion girls christened slightly but persistently\\n below 50%\")\n```\n\n::: {.cell-output-display}\n![](notes_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n## 4. Overplotting\n\n## 5. Choosing a Theme\n\n## 6. Annotations\n\n## Summary\n\nThere are more that you can do. Ask in the discussion.\n\n<!-- {{< include ../../assets/_links-to-materials.qmd >}} -->\n",
    "supporting": [
      "notes_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}