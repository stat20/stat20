---
title: "Conditioning"
subtitle: "Filtering, groupwise operations, and data pipelines."
image: images/mammals.png
from: markdown+emoji
date: 02/08/23
---

{{< include ../../assets/includes/_notes-header.qmd >}}

\

[I]{.dropcap}n the world of data, bigger is not always better. Sometimes there are real benefits to working with a subset of your observations that meet some particular condition. One use of conditioning is to add specificity to a claim. Another use of conditioning is to illuminate the relationship between variables.

To practice with conditioning, let's turn to a data set that begins with a very general focus. In 2007, Savage and West published *A qualitative, theoretical framework for understanding mammalian sleep*[^msleep], wherein they "develop a general, quantitative theory for mammalian sleep that relates many of its fundamental parameters to metabolic rate and body size". Characterizing the sleep patterns of *all* mammals is a broad task and their data set is corresponding diverse.

```{r}
library(tidyverse)

msleep <- msleep %>%
    mutate(log_bodywt = log(bodywt * 1000)) %>%
    select(name, sleep_total, log_bodywt, 
           vore, conservation)

msleep
```

In this data set, the unit of observation is a single species and the variables observed on each are its name, the average length of sleep each day, the natural log of the average weight, its dietary pattern, and its conservation status. We can visualize the relationship between sleep and body size in all 83 species using a scatter plot.

```{r}
df_labels <- filter(msleep, 
                    name %in% c("Little brown bat",
                                "African elephant"))

library(ggrepel)
p_sleep <- msleep %>%
    ggplot(aes(x = log_bodywt,
                   y = sleep_total)) +
    geom_point() +
    geom_text_repel(data = df_labels, 
                    aes(label = name), 
                    min.segment.length = 0,
                    box.padding = 2.5) +
    labs(x = "body weight (in log grams)",
         y = "total sleep per day (in hrs)") +
    theme_bw()

p_sleep
```

The mammals vary from the wee brown bat, slumbering for nearly 20 hours a day, to the massive African elephant, nodding off for less than five. That is quite a range! Lets drill down to smaller subsets of this data frame to gain a more nuanced sense of what is going on.

[^msleep]: V. M. Savage and G. B. West. [A quantitative, theoretical framework for understanding mammalian sleep](https://www.pnas.org/doi/10.1073/pnas.0610080104). Proceedings of the National Academy of Sciences, 104 (3):1051-1056, 2007.

## Filtering

If you think about the shape of a data frame, there are two basic ways you might go about slicing and dicing it into smaller subsets.

One way is to go at it column-by-column. The act of selecting a subset of the columns of a data frame is called, well, *selecting*. When you select a column, you can do so either by its name or by its column number (or index). Selecting columns by name is more useful because their order tends to be arbitrary and might change over the course of an analysis.

The other way to go at it is row-by-row. The act of subsetting the rows of the data frame based on their row number is called *slicing*. As with columns, the order of the rows is also often arbitrary, so this is of limited use. Much more useful is *filtering*.

:::{.column-margin}
In the tidyverse, these functions are named `select()`, `slice()`, and `filter()`.
:::

**Filtering**

:   The act of subsetting the rows of a data frame based on the values of one or more variables to extract the observations of interest.

Filters are powerful because they are they comb through the values of the data frame, which is where most of the information is. The key part of any filter is the condition that you assert for the rows that are retained in your data frame. Let's set up a filter to return only the little brown bat.

```{r}
#| code-fold: false

filter(msleep, name == "Little brown bat")
```

Here `name == "Little brown bat"` is the condition that must be met by any row in the data set that is returned. The syntax used to set up the condition is a comparison between a column in the data frame on the left and a possible value of that column on the right.

### Comparison Operators

The filter above uses the most direct condition: it retains the rows that have a value in the `name` variable that is precisely `"Little brown bat"`. In this case, there is only one such row. There are a range of different comparisons that can be made, though, and each has its own operator.

:::: {.columns}

::: {.column width="20%"}
:::

::: {.column width="60%"}
| Operator | Translation               |
|----------|--------------------------|
| `==`     | equal to                 |
| `!=`     | not equal to             |
| `<`      | less than                |
| `>`      | greater than             |
| `<=`     | less than or equal to    |
| `>=`     | greater than or equal to |
:::

::: {.column width="20%"}
:::

::::

At first, the `==` operator looks like a typo. Why doesn't we use `=`? The reason is that a single equals sign is already busy at work in R: it sets the values of arguments inside a function. Here, it is determinining whether the thing on the left holds the same value as the thing on the right. It might help you keep things straight if you read it in your head as "is exactly equal to".

Let's return only the rows with large animals, defined as those with a log body weight greater than 6.

```{r}
#| code-fold: false

filter(msleep, log_bodywt > 12)
```

There were 9 such animals and all of them large.

### Logical Operators

What if you want both the little brown bat and the African elephant? What if you want both the large creatures as well as those that sleep only briefly? These are tasks that call for multiple comparisons composed together with the logical operators `&`, `|`, and `%in%`.

This filter returns the creates who are large and who sleep little.

```{r}
#| code-fold: false

filter(msleep, log_bodywt > 12 & sleep_total < 5)
```

This can be read as "filter the msleep data frmae to return the rows where both the log body weight is greater than 12 and the sleep total is less than 5". We see that there are 8 such creatures, one fewer than the data frame with only the body weight filter (bottle-nosed dolphins sleep, on average, 5.2 hrs).

Using `&` to represent "and" is common across most computer languages but you can alternatively use the somewhat more compact syntax of simply adding the second filter after a comma.

```{r}
#| code-fold: false

filter(msleep, log_bodywt > 12, sleep_total < 5)
```

These two methods are equivalent.

To return all rows that either have a high body weight or low sleep time or both, use the `|` operator (sometimes called "vertical bar").

```{r}
#| code-fold: false

filter(msleep, log_bodywt > 12 | sleep_total < 5)
```

Be cautious in deciding whether you want to use `&`  or `|`. While `|` is generally read as "or", we could also describe the above filter as one that returns the rows that have a high body weight and the rows that have low sleep times.

One way to keep them straight is to keep an eye on the number of observations that are returned. The intersection of multiple conditions (using `&`) should result in the same or fewer rows (the orange area) than the union of multiple conditions (using `|`) (the blue area). 

```{r}
#| fig-height: 3
#| fig-align: center

library(patchwork)

p_and <- p_sleep +
    annotate("rect", xmin = 12, xmax = 16,
             ymin = 1.5, ymax = 5, 
             fill = "orange", alpha = .4)

p_or <- p_sleep +
    annotate("rect", xmin = 12, xmax = 16,
             ymin = 1.5, ymax = 20, 
             fill = "blue", alpha = .4) +
    annotate("rect", xmin = 2, xmax = 12,
             ymin = 1.5, ymax = 5, 
             fill = "blue", alpha = .4)

p_and + p_or
```

When working with nominal categorical variables, the only operator that you'll be using is `==`. You can return a union like normal using `|`,

```{r}
#| code-fold: false

filter(msleep, name == "Little brown bat" | name == "African elephant")
```

Or you can save some typing (and craft more readable code) by using `%in%` instead:

```{r}
#| code-fold: false

filter(msleep, name %in% c("Little brown bat", "African elephant"))
```


### Taxonomy of Data: Logicals

It is useful to pause here to look under the hood of this code. Once you get accustomed to the comparison operators and the syntax, the R code reads very similarly to the equivalent english command. But how are those comparisons being represented in terms of data?

To answer this question, consider a simple numeric vector of four integers.

```{r}
#| code-fold: false

a <- c(2, 4, 6, 8)
```

We can apply a comparison operator to this vector using the same syntax as above. Let's compare each value in this vector to see if its less than 5.

```{r}
#| code-fold: false

a < 5
```

The result is a vector of the same length as `a` where each value indicates whether the comparison to each element was true or false. While it looks like a factor or a character vector `TRUE` and `FALSE`, this is actually our newest entry into the Taxonomy of Data: the **logical vector**.

```{r}
#| code-fold: false

class(a < 5)
```

A logical vector can only take two values, `TRUE` and `FALSE` (R also recognizes `T` and `F` but not `True` or `true`). While it might seem like a categorical variable with only two levels, a logical vector has an important property that makes it behave like a numerical variable.

```{r}
#| code-fold: false

sum(a < 5)
```

In a logical vector, a value of true is represented both by `TRUE` and by the number 1 and false by `FALSE` and the number 0. This integer representation is why `TRUE + TRUE` will work (it's 2!) but `"TRUE" + "TRUE"` will not.

This dual representation is very useful because it allows us to compute a proportion using, paradoxically, the `mean()` function.

```{r}
#| code-fold: false

mean(a < 5)
```

`a < 5` results in a vector with two 1s and two 0. When you take the mean like this, you're really finding the proportion of the elements that meet the condition that you laid out in your comparison. This is a very handy trick. We'll use it more in a moment.

<!-- ## Missing Data -->

<!-- ```{r} -->
<!-- #| code-fold: false -->

<!-- filter(msleep, log_bodywt > 6) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| code-fold: false -->

<!-- filter(msleep, !is.na(log_bodywt), -->
<!--        log_bodywt > 6) -->
<!-- ``` -->

## Data Pipelines

At this stage in the course, the number of functions that you are familiar with has grown dramatically. To do truly powerful things with data, you need to not just call one of these functions, but string together many of them in a thoughtful and organized manner.

An an example, to create a sorted data frame containing just the large animals, we need to take the original data frame and

1. `filter()` such that `log_bodywt > 12` and then
2. `arrange()` in descending order of weight (`desc(log_bodywt)`).

A conventional approach breaks this process into two distinct lines of code and saves the output mid-way through.

```{r}
#| code-fold: false

msleep_large <- filter(msleep, log_bodywt > 12)
arrange(msleep_large, desc(log_bodywt))
```

An approach that is more concise, easier to read, and generally faster to run is to compose these functions together with "the pipe". The pipe, written `%>%`, is an operator that you have access to when you load the tidyverse package. If you have two functions, `f1` and `f2`, both of which take a data frame as the first argument, you can pipe the output of `f1` directly into `f2` using.

:::{style="font-size: 1.5em; text-align: center"}
```
f1(DF) %>% f2()
```
:::

Let's use the pipe to rewrite the code shown above.

```{r}
#| code-fold: false

filter(msleep, log_bodywt > 12) %>% arrange(desc(log_bodywt))
```

What has changed? Most immediately, we have reduced two lines of code to one. The first function, `filter()`, is unchanged however the second function, `arrange()`, is now missing its first argument, the data frame. That is because it is being piped directly in from the output of the first function.

While this is a fine way to use the pipe, your code is made much more readable if you format it like this:

```{r}
#| code-fold: false
msleep %>%
    filter(log_bodywt > 12) %>% 
    arrange(desc(log_bodywt))
```

This code results in same output as the first version, but it now reads a bit like a poem: "Take the msleep data frame then filter it such that the log body weight is greater than twelve then arrange it in descending order by log body weight".

:::{.column-margin}
This poem is admittedly not particularly poetic.
:::

Let's look at a few examples to understand the power of such a simple piece of syntax.

### Examples

*What year had the greatest total number of christenings?*

In Lab 1, this question was tacked with two or three separate lines of code, one to `mutate()` and the other to `arrange()` (and possibly `select()`). As one pipeline, it is:

```{r}
#| code-fold: false
library(stat20data)

arbuthnot %>%
    mutate(total = boys + girls) %>%
    arrange(desc(total)) %>%
    select(year, total)
```

*What is the trend in the total number of christenings over time?*

```{r}
#| code-fold: false

arbuthnot %>%
    mutate(total = boys + girls) %>%
    ggplot(aes(x = year, y = total)) +
    geom_line()
```

This demonstrates that you can pipe a data frame directly into a ggplot - the first argument is a data frame after all! The main thing to note is that when moving into a ggplot, the layers are added with the `+` operator instead of the pipe, `%>%`.

*What proportion of carnivores sleep more than 8 hours per night?*

Answering this requires two steps: `filter()`ing to focus on carnivores and `summarize()`ing with a proportion that meet a condition (recall that a comparison results in a logical vector of 0s and 1s). It is often a good idea to record the number of observations that go into a summary statistic, which we do here with `n()`.

```{r}
#| code-fold: false
msleep %>%
    filter(vore == "carni") %>%
    summarize(p_gt_8hrs = mean(sleep_total > 8),
              n = n())
```

## Groupwise Operations

The last example above demonstrates a very common scenario: you want to perform some calculations on one particular group of observations in your data set. But what if you want to do that same calculation for every group?

The `vore` variable has four levels: `carni`, `herbi`, `insecti`, and `omni`. It would not be too difficult to copy and paste the above pipeline four times and modify each filter function to focus on a different group. But what if there were a dozen different levels?

This task - performing an operation on all groups of a data set one-by-one - is such a common data science task that nearly every software tool has a good solution. In the tidyverse, the solution is the `group_by()` function. Let's see it in action.

```{r}
#| code-fold: false
msleep %>%
    group_by(vore) %>%
    summarize(p_gt_8hrs = mean(sleep_total > 8),
              n = n())
```

Like most tidyverse functions, the first argument to `group_by()` is a data frame, so it can be slotted directly into the pipeline. The second argument, the one that shows up in the code above, is the name of the variable that you want to use to delineate the groups. This is generally a factor, character, or logical vector.

`group_by()` is an incredibly powerful function because it changes the behavior of downstream functions. Lets break our pipeline and inspect the data frame that comes out of it.

```{r}
#| code-fold: false
msleep %>%
    group_by(vore)
```

This look . . . exactly like the original data frame.

Well, not *exactly* like it: there is now a note at the top that the data frame now has the notion of groups based on `vore`. In effect, `group_by()` has taken the generic data frame and turned it into the one in the middle below: the same data frame but with rows now flagged as belonging to one group or another. When we pipe this grouped data frame into `summarize()`, which collapses that data frame down into a single row for each group and creates a new column for each new summary statistic.

![](images/group-by.png){fig-align=center width="500px"}

[^dplyrcheat]: From the dplyr cheat sheet: <https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf>.

## Summary

There are several ways to subset a data frame but the most important for data analysis is filtering: subsetting the rows according to a condition. In R, that condition is framed in terms of a comparison between a vector and a value (or set of values). Comparisons and take many forms and can be combined using logical operators. The result is a logical vector that can be used for filtering or computing summary statistics. You can perform simulataneous analyses on multiple subsets by doing groupwise operations with `group_by()`.

As we begin to do analyses that require multiple operations, the pipe operator, `%>%`, can be used to stitch the functions together into a single pipeline.

If you're thinking, :grimacing: , yikes there was a *lot* of coding in these notes, you're right. Don't worry. We'll have plenty of time to practice in class and there is no lab due next week.

<!-- {{< include ../../assets/includes/_links-to-materials.qmd >}} -->
