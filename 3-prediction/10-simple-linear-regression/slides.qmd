---
title: "Predictions"
format:
  revealjs:
    author: "STAT 20: Introduction to Probability and Statistics"
    height: 900
    width: 1600
    theme: ../../assets/slides.scss
    multiplex: false
    transition: fade
    slide-number: c
    incremental: false
    center: false
    menu: false
    highlight-style: github
    progress: false
    code-overflow: wrap
    title-slide-attributes:
      data-background-image: ../../assets/stat20-hex-bg.png
      data-background-size: contain
---

## Agenda

- Plenary RSVP!

- Concept Questions

- Discussion

- Break

- Practice problems

- Lab 4 Part III


```{r}
#| warning: false
#| message: false

library(tidyverse)
library(UsingR)
library(patchwork)
library(ggrepel)
data(father.son)
pearson <- father.son
dugong <- read.csv("~/Documents/BerkeleyTeaching/DataForTeaching/dugong.csv")
poverty <- read.csv("https://tinyurl.com/stat20poverty")
```

## Poverty and Education

```{r}
library(ggrepel)
poverty <- poverty %>%
  mutate(hi_grad = case_when(
    State %in% c("New Hampshire", "Minnesota") ~ State, 
    TRUE ~ ""),
    hi_pov = case_when(
      State %in% c("New Mexico", "Arkansas", "Mississippi") ~ State,
      TRUE ~ ""),
    hi_res = case_when(
      State %in% c("Montana", "District of Columbia") ~ State,
      TRUE ~ ""))
pov_hi_grad <- poverty %>%
  filter(hi_grad == TRUE)
p_hi_grad <- poverty %>%
  ggplot(aes(x = Poverty, 
             y = Graduates)) +
  geom_point(size = 3) +
  geom_text_repel(aes(label = hi_grad),
                  seed = 29) +
  theme_bw(base_size = 18)
p_hi_grad_pov <- p_hi_grad +
  geom_text_repel(aes(label = hi_pov),
                  seed = 29)
p_hi_grad_pov_res <- p_hi_grad_pov +
  geom_text_repel(aes(label = hi_res),
                  seed = 29)
p_all <- poverty %>%
  ggplot(aes(x = Poverty, 
             y = Graduates)) +
  geom_point(size = 3) +
  geom_text_repel(aes(label = State),
                  seed = 29) +
  theme_bw(base_size = 18)

```

```{r}
#| message: false
#| warning: false

ggplot(poverty, aes(x = Poverty, 
                    y = Graduates)) +
  geom_point(alpha = 0.6, size = 2, color="darkred") +
    geom_text_repel(aes(label = State),
                  seed = 29, size =3) +
    geom_smooth(method = "lm", se=FALSE)
```

## Poverty and Education

```{r}
#| fig-align: center
#| 
m1 <- lm(Graduates ~ Poverty, data = poverty)
p1 <- ggplot(poverty, aes(x = Poverty, 
                    y = Graduates)) +
    geom_point(alpha = 0.6, size = 2) +
    geom_abline(slope = m1$coefficients[2], intercept = m1$coefficients[1], lwd = 1.5, col = "blue") +
    geom_abline(slope = m1$coefficients[2], intercept = m1$coefficients[1] - 4, lwd = 1.5, col = "green") +
    geom_abline(slope = 1, intercept = 70, lwd = 1.5, col = "orange") +
    geom_abline(slope = 0, intercept = 84.5, lwd = 1.5, col = "red") +
    theme_bw()

df <- data.frame(b0 = 70, b1 = 1)

p2 <- ggplot(df, aes(x = b0, y = b1)) +
    geom_point(size = 3) +
    xlim(50, 110) +
    ylim(-5, 3) +
    theme_bw() +
    labs(x = "b0 (intercept)",
         y = "b1 (slope)")

p1 + p2
```

:::{.poll}
Which line on the left is being represented by the point on the plot on the right? (note the axes).
:::

```{r}
countdown::countdown(1, top = 0)
```

## Poverty and Education

```{r}
p3 <- ggplot(df, aes(x = b0, y = b1)) +
    geom_point(size = 3, col = "orange") +
    annotate("point", x = m1$coefficients[1] - 4, y = m1$coefficients[2], size = 3, col = "green") +
    annotate("point", x = m1$coefficients[1], y = m1$coefficients[2], size = 3, col = "blue") +
    annotate("point", x = 84.5, y = 0, size = 3, col = "red") +
    xlim(50, 110) +
    ylim(-5, 3) +
    theme_bw() +
    labs(x = "b0 (intercept)",
         y = "b1 (slope)")

p1 + p3
```


## Consider dugongs

![Vardhanjp, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons](Dugong.jpg)

## Squared errors vs Absolute errors

```{r}
#| message: false
#| warning: false

dugong20 <- filter(dugong, Age <= 20)
dugong25 <- filter(dugong, Age <= 25)

ggplot(dugong20, aes(x = Age, y = Length)) + 
    geom_point() + 
    geom_smooth(aes(color = "Squared Error"), method = "lm", 
                se=FALSE, lwd = 1.1) +
    geom_quantile(aes(color = "Absolute Error"), quantiles=0.5, lwd=1.1) +
    ggtitle("Two types of errors give us two different lines") +
    theme(legend.position = "None")
```


# Concept question

---

```{r}
countdown::countdown(1, top = 0)
```

:::{.poll}
Which line is the least squares line? (pollev.com)
:::

```{r}
#| message: false
#| warning: false

ggplot(dugong, aes(x = Age, y = Length)) + 
    geom_point() + 
    geom_smooth( aes(color = "Squared Error"), method = "lm", se=FALSE, lwd = 1.1) +
    geom_quantile(aes(color = "Absolute Error"), quantiles=0.5, lwd=1.1) +
    ggtitle("Older dugongs are longer")  +
   theme(legend.position = "None")
```

# Concept question

---

```{r}
countdown::countdown(2, top = 1)
```

<!-- :::: {.columns} -->

<!-- ::: {.column width="35%"} -->
<!-- There are three types of residuals (errors) shown here, from the observed data point to the least squares regression line: parallel to the $x$-axis (a), perpendicular from the point to the line (b),  and parallel to the $y$-axis (c), -->

<!-- ::: -->

<!-- ::: {.column width="65%"} -->

```{r}
#| message: false
#| warning: false

dugong20 %>% 
    filter(Age >= 4, Age <= 15) %>%
    ggplot(aes(x = Age, y = Length)) + 
    geom_point() + 
    geom_smooth( method = "lm", se=FALSE, lwd = 1.1, color = "darkmagenta") +
    annotate("segment", x = 12, xend = 12, y = 2.325, yend = 2.435, color = "red", lwd = 1.1) +
    annotate("text", x = 12.17, y  = 2.375, label = "c", color = "red", size = 5) + 
    annotate("segment", x = 7.9, xend = 11.95, y = 2.32, yend = 2.32, color = "chartreuse3", lwd = 1.1) +
    annotate("text", x = 10.7, y  = 2.335, label = "a", color = "chartreuse3", size = 5) +
    annotate("segment", x = 11.22, xend = 11.95, y = 2.415, yend = 2.322, color = "deepskyblue1", lwd = 1.1) + 
    annotate("text", x = 11.4, y  = 2.37, label = "b", color = "deepskyblue1", size = 5) 

```
<!-- ::: -->

<!-- :::: -->

:::{.poll}
We minimize the sum of squares of *which* of these three types of residuals to find the slope and intercept of the least squares regression line? (pollev.com)
:::
## How would you predict the height of a son? {auto-animate=true}


```{r}
#| warning: false
#| message: false

ggplot(pearson, aes(x=fheight,y=sheight)) + 
    geom_point(color ="grey45", cex = 2, alpha = 0.5) +
    xlab("heights of fathers") + ylab("heights of sons") + 
    ggtitle("Pearson and Galton: On average, taller fathers have taller sons")
```



## {auto-animate=true}


```{r}
sd_f <- sd(pearson$fheight)
sd_s <- sd(pearson$sheight)
mean_f <- mean(pearson$fheight)
mean_s <- mean(pearson$sheight)
ggplot(pearson, aes(x=fheight,y=sheight)) + 
    geom_point(color ="grey45",cex=2, alpha = 0.5) +
    xlab("heights of fathers") + ylab("heights of sons") + 
    ggtitle("Can we use this line to predict a son's height?") +
    geom_hline(yintercept = mean_s, color = "grey30", lwd=1.1)
```



## {auto-animate=true}


```{r}
ggplot(pearson, aes(x=fheight,y=sheight)) + 
    geom_point(color ="grey45",cex=2, alpha = 0.5) +
    xlab("heights of fathers") + ylab("heights of sons") + 
    ggtitle("What about this line?") +
    geom_abline(slope = sd_s/sd_f, intercept = mean_s - (sd_s/sd_f)*mean_f, color = "darkred", lwd=1.1)
```



## {auto-animate=true}


```{r}
ggplot(pearson, aes(x=fheight,y=sheight)) + 
    geom_point(color ="grey45",cex=2, alpha = 0.5) +
    xlab("heights of fathers") + ylab("heights of sons") + 
    ggtitle("Look at the vertical slices") +
    geom_abline(slope = sd_s/sd_f, intercept = mean_s - (sd_s/sd_f)*mean_f, color = "darkred", lwd=1.1) + geom_vline(xintercept = c(64.5,65.6,69.5,70.5), lty=2)
```


## {auto-animate=true}


```{r}
cor_sf <- cor(pearson$fheight,pearson$sheight)
ggplot(pearson, aes(x=fheight,y=sheight)) + 
    geom_point(color ="grey45",cex=2, alpha = 0.4) +
    xlab("heights of fathers") + ylab("heights of sons") + 
    ggtitle("Which line is best? (pollev.com") +
    geom_abline(slope = sd_s/sd_f, intercept = mean_s - (sd_s/sd_f)*mean_f, color = "darkred", lwd=1.1) + geom_vline(xintercept = c(64.5,65.6,69.5,70.5), lty=2) +
    geom_abline(slope = cor_sf*sd_s/sd_f, intercept =  mean_s - cor_sf*(sd_s/sd_f)*mean_f, color = "chartreuse4", lwd=1.1) +
    geom_hline(yintercept = mean_s, color = "grey20", lwd=1.1)+
    annotate("text", x = 75, y = 77, color = "darkred", label = "A") +
    annotate("text", x = 75, y = 73, color = "chartreuse4", label = "B") + 
    annotate("text", x = 75, y = 69.5, color = "grey20", label = "C")

```

---

```{r}
pearson %>%
    mutate("roundf" = round(fheight)) %>%
    group_by(roundf) %>%
    summarise("mean_s" = mean(sheight)) %>%
    ggplot(aes(x=roundf, y=mean_s)) + geom_point(size = 3, alpha=0.6) + 
    geom_smooth(method = "lm", se = FALSE, color = "darkred") +
    xlab("heights of fathers") + ylab("average heights of sons") +
    ggtitle("Regression line")
```

## Flight data and lm

Recall the flight data. Let's plot the distance against average speed.

```{r}
library(stat20data) 
data(flights)
flights1 <- flights %>% 
    mutate(avg_speed = distance/(air_time/60)) 

ggplot(flights1, aes(x = distance, y = avg_speed,color = dest)) + geom_point() 

```

---

```{r}
flights_lm <- lm(avg_speed ~ distance, data = flights1)
summary(flights_lm)

flights1 %>%
    summarise("r" = cor(distance, avg_speed, use = "complete.obs"), "r-sq" = cor(distance, avg_speed, use = "complete.obs")^2)

flights_lm$coef
```

